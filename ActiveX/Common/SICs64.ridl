// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Library Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 24.06.2023 7:59:49 (- $Rev: 12980 $, 20215750).

[
  uuid(815AE067-C547-44CE-8CD4-DFFF5B47A0BC),
  version(6.2),
  helpstring("SICs64 Library")

]
library SICs64
{

  importlib("stdole2.tlb");

  interface ISICs64;
  coclass SICos64;


  [
    uuid(4A7217F8-1379-481F-8FAC-B415505BCB2F),
    version(1.0),
    helpstring("24-char array"),
    public
  ]
  typedef unsigned char TSIC_Char24[24];

  [
    uuid(F3378BFD-920E-46F6-8376-187662210607),
    version(1.0),
    helpstring("42-char array"),
    public
  ]
  typedef unsigned char TSIC_Char42[42];

  [
    uuid(CB86A28B-B0F5-45D6-BEBE-7F22F92F25A9),
    version(1.0),
    helpstring("44-char array"),
    public
  ]
  typedef unsigned char TSIC_Char44[44];

  [
    uuid(C8DA2B52-78D3-478B-A8E8-B6B5CCCB62A9),
    version(1.0),
    helpstring("50-char array"),
    public
  ]
  typedef unsigned char TSIC_Char50[50];

  [
    uuid(74B18E4B-C4A4-4D3C-AB60-90A311172D93),
    version(1.0),
    helpstring("52-char array"),
    public
  ]
  typedef unsigned char TSIC_Char52[52];

  [
    uuid(CB46B3CC-A1E9-4F38-9EB8-37E4F634EECB),
    version(1.0),
    helpstring("54-char array"),
    public
  ]
  typedef unsigned char TSIC_Char54[54];

  [
    uuid(F7813C91-AF53-4743-940D-8A164A789A4B),
    version(1.0),
    helpstring("SIC config structure")
  ]
  struct TSIC_Config
  {
    [helpstring("Compiler flags")]
    unsigned long cflags;
    [helpstring("Memory block size")]
    unsigned __int64 memory;
    [helpstring("CPU flags")]
    unsigned long cpu_flags;
    [helpstring("Size of .code section")]
    unsigned long section_code;
    [helpstring("Size of .data section")]
    unsigned long section_data;
    [helpstring("Size of .idata section")]
    unsigned long section_idata;
    [helpstring("Size of .edata section")]
    unsigned long section_edata;
    [helpstring("Size of .rsrc section")]
    unsigned long section_rsrc;
    [helpstring("Size of .reloc section")]
    unsigned long section_reloc;
    [helpstring("Size of built-in functions")]
    unsigned long fcode_size;
    [helpstring("Function data segment size")]
    unsigned __int64 fdata_size;
    [helpstring("Maximum function count")]
    unsigned long fdata_count;
    [helpstring("Constant data segment size")]
    unsigned __int64 cdata_size;
    [helpstring("Maximum constant count")]
    unsigned long cdata_count;
    [helpstring("Variable data segment size")]
    unsigned __int64 vdata_size;
    [helpstring("Maximum variable count")]
    unsigned long vdata_count;
    [helpstring("Runtime data segment size")]
    unsigned __int64 rdata_size;
    [helpstring("Maximum runtime count")]
    unsigned long rdata_count;
    [helpstring("Stack array size")]
    unsigned __int64 stack_size;
    [helpstring("Maximum token count")]
    unsigned long stack_count;
    [helpstring("Rpn array size")]
    unsigned __int64 rpn_size;
    [helpstring("Maximum rpn item count")]
    unsigned long rpn_count;
    [helpstring("Code segment size")]
    unsigned __int64 code_size;
    [helpstring("Maximum length of function name")]
    unsigned long fitem_nsize;
    [helpstring("Maximum length of constant name")]
    unsigned long citem_nsize;
    [helpstring("Maximum length of variable name")]
    unsigned long vitem_nsize;
    [helpstring("Maximum section count in user-defined data files (SIC.UDF, SIC.UDV)")]
    unsigned long uddata_scount;
  };

  [
    uuid(92EE04A1-DF16-45A3-B639-CEED26E1ACFE),
    version(1.0),
    helpstring("SIC data structure")
  ]
  struct TSIC_Data
  {
    [helpstring("Function data segment offset")]
    unsigned __int64 fdata;
    [helpstring("Constant data segment offset")]
    unsigned __int64 cdata;
    [helpstring("Variable data segment offset")]
    unsigned __int64 vdata;
    [helpstring("Runtime data segment offset")]
    unsigned __int64 rdata;
    [helpstring("Code segment offset")]
    unsigned __int64 code;
    [helpstring("Data segment offset")]
    unsigned __int64 data;
    [helpstring("Heap segment offset")]
    unsigned __int64 heap;
    [helpstring("Entry point")]
    unsigned __int64 entry;
    [helpstring("Parameter")]
    unsigned __int64 param;
    [helpstring("Code size")]
    unsigned long size;
    [helpstring("Code space")]
    unsigned long cspace;
    [helpstring("Code align")]
    unsigned long calign;
    [helpstring("Data size")]
    unsigned long dsize;
    [helpstring("Data space")]
    unsigned long dspace;
    [helpstring("Data align")]
    unsigned long dalign;
    [helpstring("Heap size")]
    unsigned long hsize;
    [helpstring("Heap space")]
    unsigned long hspace;
    [helpstring("Heap align")]
    unsigned long halign;
    [helpstring("Compiler options")]
    unsigned long coops;
    [helpstring("Scanned tokens count")]
    unsigned long tokens;
    [helpstring("Rpn array item count")]
    unsigned long rpn;
    [helpstring("Functions count")]
    unsigned long fcount;
    [helpstring("Constants count")]
    unsigned long ccount;
    [helpstring("Variables count")]
    unsigned long vcount;
    [helpstring("Runtimes count")]
    unsigned long rcount;
    [helpstring("Current string cursor")]
    unsigned long ccurs;
    [helpstring("Previous string cursor")]
    unsigned long pcurs;
    [helpstring("Global data")]
    unsigned __int64 gdata;
    [helpstring("Global code")]
    unsigned long gcode;
    [helpstring("Error code")]
    unsigned long ecode;
    [helpstring("Return code")]
    unsigned long rcode;
    [helpstring("Return value")]
    double value;
  };

  [
    uuid(414729C0-3F52-4378-A9C7-52DC60776B7F),
    version(1.0),
    helpstring("Common table header")
  ]
  struct TSIC_TableHeader
  {
    [helpstring("Item count")]
    long icount;
    [helpstring("Item max count")]
    long mcount;
    [helpstring("Table item size")]
    long tisize;
    [helpstring("Table item name size")]
    long tnsize;
    [helpstring("Table item type")]
    long titype;
    [helpstring("Padding")]
    long oooooo;
  };

  [
    uuid(22891987-6CF7-42F2-8D07-6E0A06AAB323),
    version(1.0),
    helpstring("Function table item")
  ]
  struct TSIC_FunItem
  {
    [helpstring("Function name (zero terminated)")]
    TSIC_Char50 name;
    [helpstring("Function return type")]
    short retype;
    [helpstring("Function argument count")]
    short acount;
    [helpstring("Function code size or flags")]
    short cosize;
    [helpstring("Function offset")]
    unsigned __int64 offset;
  };

  [
    uuid(1D9C81A3-6F40-467F-9776-427EE5289C0D),
    version(1.0),
    helpstring("Function table")
  ]
  struct TSIC_FunTable
  {
    [helpstring("Function table header")]
    struct TSIC_TableHeader header;
    [helpstring("Function item list")]
    struct TSIC_FunItem items;
  };

  [
    uuid(0DA9A7C6-5F7B-4BD9-8A85-00CA75043F43),
    version(1.0),
    helpstring("Constant table item")
  ]
  struct TSIC_ConItem
  {
    [helpstring("Constant name (zero terminated)")]
    TSIC_Char44 name;
    [helpstring("Constant data")]
    unsigned __int64 codata;
    [helpstring("Constant type")]
    short cotype;
    [helpstring("Constant data type")]
    short datype;
    [helpstring("Constant value")]
    double value;
  };

  [
    uuid(77FBE788-C74B-4DF6-85E9-8C33444813A4),
    version(1.0),
    helpstring("Constant table")
  ]
  struct TSIC_ConTable
  {
    [helpstring("Constant table header")]
    struct TSIC_TableHeader header;
    [helpstring("Constant item list")]
    struct TSIC_ConItem items;
  };

  [
    uuid(35831577-00A8-42FE-AC9F-5C662002B2D9),
    version(1.0),
    helpstring("Variable table item")
  ]
  struct TSIC_VarItem
  {
    [helpstring("Variable name (zero terminated)")]
    TSIC_Char44 name;
    [helpstring("Variable data")]
    unsigned __int64 vadata;
    [helpstring("Variable type")]
    short vatype;
    [helpstring("Variable data type")]
    short datype;
    [helpstring("Variable offset")]
    unsigned __int64 offset;
  };

  [
    uuid(BB9876DD-4456-48FA-8ABA-A4B3EDC3BF6F),
    version(1.0),
    helpstring("Variable table")
  ]
  struct TSIC_VarTable
  {
    [helpstring("Variable table header")]
    struct TSIC_TableHeader header;
    [helpstring("Variable item list")]
    struct TSIC_VarItem items;
  };

  [
    uuid(525B5C81-C28E-4482-894F-8DBDE92FA180),
    helpstring("Complex number")
  ]
  struct TSIC_Complex
  {
    [helpstring("Real part")]
    double re;
    [helpstring("Imaginary part")]
    double im;
  };

  [
    uuid(AD991C8D-D039-4122-A2E4-7C4F25628791),
    version(1.0),
    helpstring("IDA data")
  ]
  struct TSIC_IDAData
  {
    [helpstring("instr_size")]
    unsigned char instr_size;
    [helpstring("flags")]
    unsigned long flags;
    [helpstring("prefix_size")]
    unsigned char prefix_size;
    [helpstring("rex")]
    unsigned char rex;
    [helpstring("prex_size")]
    unsigned char prex_size;
    [helpstring("prex_0")]
    unsigned char prex_0;
    [helpstring("prex_1")]
    unsigned char prex_1;
    [helpstring("prex_2")]
    unsigned char prex_2;
    [helpstring("prex_3")]
    unsigned char prex_3;
    [helpstring("modrm")]
    unsigned char modrm;
    [helpstring("sib")]
    unsigned char sib;
    [helpstring("opcode_offset")]
    unsigned char opcode_offset;
    [helpstring("opcode_size")]
    unsigned char opcode_size;
    [helpstring("disp_offset")]
    unsigned char disp_offset;
    [helpstring("disp_size")]
    unsigned char disp_size;
    [helpstring("imm_offset")]
    unsigned char imm_offset;
    [helpstring("imm_size")]
    unsigned char imm_size;
  };

  [
    uuid(C6B58061-C958-4E32-B56C-B30A8D014B4E),
    version(1.0)
  ]
  interface ISICs64: IUnknown
  {
    [id(0x000000AC), helpstring("Compiler version")]
    unsigned long _stdcall Version(void);
    [id(0x000000C0), helpstring("Compiler support for the CPU")]
    VARIANT_BOOL _stdcall CPUSupport(void);
    [id(0x000000A8), helpstring("Setup compiler")]
    void _stdcall Setup([in] void* AConfig);
    [id(0x00000065), helpstring("Create global tables")]
    void _stdcall CreateTables(void);
    [id(0x00000066), helpstring("Destroy global tables")]
    void _stdcall FreeTables(void);
    [id(0x00000067), helpstring("Create global function table")]
    unsigned long _stdcall FunTableCreate(void);
    [id(0x00000068), helpstring("Destroy global function table")]
    void _stdcall FunTableFree(void);
    [id(0x00000069), helpstring("Load external user defined functions")]
    unsigned long _stdcall FunLoad(void);
    [id(0x0000006A), helpstring("Unload external user defined functions")]
    void _stdcall FunUnload(void);
    [id(0x0000006B), helpstring("Create global constant table")]
    unsigned long _stdcall ConTableCreate(void);
    [id(0x0000006C), helpstring("Destroy global constant table")]
    void _stdcall ConTableFree(void);
    [id(0x0000006D), helpstring("Load external user defined constants")]
    unsigned long _stdcall ConLoad(void);
    [id(0x0000006E), helpstring("Unload external user defined constants")]
    void _stdcall ConUnload(void);
    [id(0x0000006F), helpstring("Create global variable table")]
    unsigned long _stdcall VarTableCreate(void);
    [id(0x00000070), helpstring("Destroy global variable table")]
    void _stdcall VarTableFree(void);
    [id(0x00000071), helpstring("Load external user defined variables")]
    unsigned long _stdcall VarLoad(void);
    [id(0x00000072), helpstring("Unload external user defined variables")]
    void _stdcall VarUnload(void);
    [id(0x00000073), helpstring("Create global runtime table")]
    unsigned long _stdcall RunTableCreate(void);
    [id(0x00000074), helpstring("Destroy global runtime table")]
    void _stdcall RunTableFree(void);
    [id(0x00000075), helpstring("Allocate memory for data segments")]
    void _stdcall Init([in] void* ASic);
    [id(0x00000076), helpstring("Free memory previously allocated for data and code segments")]
    void _stdcall Done([in] void* ASic);
    [id(0x00000077), helpstring("Add|set user defined global or local function ( AFuname ) and assign data ( AOffset, AACount, AFlags )")]
    long _stdcall AddFun([in] void* ASic, [in] LPSTR AFuname, [in] void* AOffset, [in] short AACount, [in] unsigned short AFlags);
    [id(0x00000078), helpstring("Rename global or local function")]
    long _stdcall RenameFun([in] void* ASic, [in] LPSTR AFuname, [in] LPSTR AOrgname, [in] VARIANT_BOOL AInvalidate);
    [id(0x000000A5), helpstring("Duplicate global or local function")]
    long _stdcall DuplicateFun([in] void* ASic, [in] LPSTR AFuname, [in] LPSTR AOrgname);
    [id(0x000001A5), helpstring("Exchange global or local functions")]
    long _stdcall ExchangeFun([in] void* ASic, [in] LPSTR AFuname, [in] LPSTR AFunami);
    [id(0x00000079), helpstring("Add|set user defined global or local float constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConF([in] void* ASic, [in] LPSTR AConame, [in] double AValue);
    [id(0x0000007A), helpstring("Add|set user defined global or local integer constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConI([in] void* ASic, [in] LPSTR AConame, [in] long AValue);
    [id(0x0000007B), helpstring("Add|set user defined global or local string constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConS([in] void* ASic, [in] LPSTR AConame, [in] LPSTR AValue);
    [id(0x000000A3), helpstring("Add|set user defined global or local offset constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConO([in] void* ASic, [in] LPSTR AConame, [in] void* AValue);
    [id(0x0000007C), helpstring("Add|set user defined global or local pointer constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConP([in] void* ASic, [in] LPSTR AConame, [in] void* AValue);
    [id(0x0000017C), helpstring("Add|set user defined global or local float pointer constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConPF([in] void* ASic, [in] LPSTR AConame, [in] void* AValue);
    [id(0x0000027C), helpstring("Add|set user defined global or local integer pointer constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConPI([in] void* ASic, [in] LPSTR AConame, [in] void* AValue);
    [id(0x0000037C), helpstring("Add|set user defined global or local string pointer constant ( AConame ) and assign data ( AValue )")]
    long _stdcall AddConPS([in] void* ASic, [in] LPSTR AConame, [in] void* AValue);
    [id(0x0000007D), helpstring("Rename global or local constant")]
    long _stdcall RenameCon([in] void* ASic, [in] LPSTR AConame, [in] LPSTR AOrgname, [in] VARIANT_BOOL AInvalidate);
    [id(0x000000A6), helpstring("Duplicate global or local constant")]
    long _stdcall DuplicateCon([in] void* ASic, [in] LPSTR AConame, [in] LPSTR AOrgname);
    [id(0x000001A6), helpstring("Exchange global or local constants")]
    long _stdcall ExchangeCon([in] void* ASic, [in] LPSTR AConame, [in] LPSTR AConami);
    [id(0x0000007E), helpstring("Add|set user defined global or local float variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarF([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x0000007F), helpstring("Add|set user defined global or local integer variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarI([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000080), helpstring("Add|set user defined global or local string variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarS([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x000000A4), helpstring("Add|set user defined global or local offset variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarO([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000081), helpstring("Add|set user defined global or local pointer variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarP([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000181), helpstring("Add|set user defined global or local float pointer variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarPF([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000281), helpstring("Add|set user defined global or local integer pointer variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarPI([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000381), helpstring("Add|set user defined global or local string pointer variable ( AVaname ) and assign data ( AOffset )")]
    long _stdcall AddVarPS([in] void* ASic, [in] LPSTR AVaname, [in] void* AOffset);
    [id(0x00000082), helpstring("Rename global or local variable")]
    long _stdcall RenameVar([in] void* ASic, [in] LPSTR AVaname, [in] LPSTR AOrgname, [in] VARIANT_BOOL AInvalidate);
    [id(0x000000A7), helpstring("Duplicate global or local variable")]
    long _stdcall DuplicateVar([in] void* ASic, [in] LPSTR AVaname, [in] LPSTR AOrgname);
    [id(0x000001A7), helpstring("Exchange global or local variables")]
    long _stdcall ExchangeVar([in] void* ASic, [in] LPSTR AVaname, [in] LPSTR AVanami);
    [id(0x00000083), helpstring("Invalidate global or local function ( AFuname )")]
    long _stdcall InvalidateFun([in] void* ASic, [in] LPSTR AFuname);
    [id(0x00000084), helpstring("Invalidate global or local constant ( AConame )")]
    long _stdcall InvalidateCon([in] void* ASic, [in] LPSTR AConame);
    [id(0x00000085), helpstring("Invalidate global or local variable ( AVaname )")]
    long _stdcall InvalidateVar([in] void* ASic, [in] LPSTR AVaname);
    [id(0x00000086), helpstring("Pack global or local tables ( remove deleted items, decrease and fix table size )")]
    void _stdcall PackTables([in] void* ASic);
    [id(0x00000087), helpstring("Pack global or local function table ( remove deleted items, decrease and fix table size )")]
    void _stdcall PackFunTable([in] void* ASic);
    [id(0x00000088), helpstring("Pack global or local constant table ( remove deleted items, decrease and fix table size )")]
    void _stdcall PackConTable([in] void* ASic);
    [id(0x00000089), helpstring("Pack global or local variable table ( remove deleted items, decrease and fix table size )")]
    void _stdcall PackVarTable([in] void* ASic);
    [id(0x0000008A), helpstring("Get global or local function table offset")]
    LPSTR _stdcall GetFunTable([in] void* ASic);
    [id(0x0000008B), helpstring("Get global or local function item count")]
    unsigned long _stdcall GetFunCount([in] void* ASic);
    [id(0x0000008C), helpstring("Get global or local function item")]
    long _stdcall GetFunItem([in] void* ASic, [in] long AIndex, [in, out] struct TSIC_FunItem* AItem);
    [id(0x0000008D), helpstring("Get global or local item ( AFuname ) index in function table")]
    long _stdcall GetFunIndex([in] void* ASic, [in] LPSTR AFuname);
    [id(0x0000008E), helpstring("Get global or local constant table offset")]
    LPSTR _stdcall GetConTable([in] void* ASic);
    [id(0x0000008F), helpstring("Get global or local constant item count")]
    unsigned long _stdcall GetConCount([in] void* ASic);
    [id(0x00000090), helpstring("Get global or local constant item")]
    long _stdcall GetConItem([in] void* ASic, [in] long AIndex, [in, out] struct TSIC_ConItem* AItem);
    [id(0x00000091), helpstring("Get global or local item ( AConame ) index in constant table")]
    long _stdcall GetConIndex([in] void* ASic, [in] LPSTR AConame);
    [id(0x00000092), helpstring("Get global or local variable table offset")]
    LPSTR _stdcall GetVarTable([in] void* ASic);
    [id(0x00000093), helpstring("Get global or local variable item count")]
    unsigned long _stdcall GetVarCount([in] void* ASic);
    [id(0x00000094), helpstring("Get global or local variable item")]
    long _stdcall GetVarItem([in] void* ASic, [in] long AIndex, [in, out] struct TSIC_VarItem* AItem);
    [id(0x00000095), helpstring("Get global or local item ( AVaname ) index in variable table")]
    long _stdcall GetVarIndex([in] void* ASic, [in] LPSTR AVaname);
    [id(0x00000096), helpstring("Get global or local runtime table offset")]
    LPSTR _stdcall GetRunTable([in] void* ASic);
    [id(0x00000097), helpstring("Get global or local runtime item count")]
    unsigned long _stdcall GetRunCount([in] void* ASic);
    [id(0x00000098), helpstring("Get global or local runtime item")]
    long _stdcall GetRunItem([in] void* ASic, [in] long AIndex, [in, out] struct TSIC_ConItem* AItem);
    [id(0x00000099), helpstring("Get global or local item ( ARuname ) index in runtime table")]
    long _stdcall GetRunIndex([in] void* ASic, [in] LPSTR ARuname);
    [id(0x0000009A), helpstring("Allocate memory for ASic code segment and compile string ( S )")]
    unsigned long _stdcall Compile([in] void* ASic, [in] LPSTR S, [in] unsigned long ASop);
    [id(0x0000009B), helpstring("Allocate memory for ASic code segment and compile string ( S )")]
    unsigned long _stdcall Build([in] void* ASic, [in] LPSTR S, [in] unsigned long ASop);
    [id(0x0000009C), helpstring("Execute code")]
    double _stdcall Exec([in] void* ASic, [in, out] unsigned long* AError);
    [id(0x0000009D), helpstring("Execute code")]
    void _stdcall Call([in] void* ASic);
    [id(0x0000009E), helpstring("Compile & execute string")]
    double _stdcall CoExec([in] void* ASic, [in] LPSTR S, [in, out] unsigned long* ASop, [in, out] unsigned long* AError);
    [id(0x0000009F), helpstring("Compile & execute string")]
    double _stdcall BuExec([in] void* ASic, [in] LPSTR S, [in, out] unsigned long* ASop, [in, out] unsigned long* AError);
    [id(0x000000A0), helpstring("Compile & execute string")]
    double _stdcall SCoExec([in] LPSTR S, [in, out] unsigned long* ASop, [in, out] unsigned long* AError);
    [id(0x000000A1), helpstring("Compile & execute string")]
    double _stdcall SBuExec([in] LPSTR S, [in, out] unsigned long* ASop, [in, out] unsigned long* AError);
    [id(0x000000A2), helpstring("Variable argument count")]
    long _stdcall va_count(void);
    [id(0x000000AA), helpstring("Instruction disassembler")]
    long _stdcall inda([in] void* ACode, [in] void* AData, [in] unsigned char Ax64);
    [id(0x000000A9), helpstring("Mersenne Twister random generator")]
    unsigned __int64 _stdcall mt19937_igen(void);
    [id(0x000000AE), helpstring("Mersenne Twister random generator")]
    double _stdcall mt19937_fgen(void);
    [id(0x000000AF), helpstring("Mersenne Twister random generator")]
    double _stdcall mt19937_fgen2pi(void);
    [id(0x000000AB), helpstring("Mersenne Twister seed by value")]
    void _stdcall mt19937_seed([in] unsigned __int64 ASeed);
    [id(0x000000AD), helpstring("Mersenne Twister seed by array")]
    void _stdcall mt19937_seeds([in] void* ASeeds, [in] unsigned __int64 ACount);
    [id(0x000000B0), helpstring("Error function")]
    double _stdcall sic_erf([in] double A);
    [id(0x000000B1), helpstring("Complementary error function")]
    double _stdcall sic_erfc([in] double A);
    [id(0x000000B2), helpstring("Normal distribution function")]
    double _stdcall sic_cdfnorm([in] double A);
    [id(0x000000B3), helpstring("Inverse error function")]
    double _stdcall sic_erfinv([in] double A);
    [id(0x000000B4), helpstring("Inverse complementary error function")]
    double _stdcall sic_erfcinv([in] double A);
    [id(0x000000B5), helpstring("Inverse of normal distribution function")]
    double _stdcall sic_cdfnorminv([in] double A);
    [id(0x000000B6), helpstring("Natural logarithm of the absolute value of gamma function")]
    double _stdcall sic_lgamma([in] double A);
    [id(0x000000B7), helpstring("Natural logarithm of the absolute value and the sign of gamma function")]
    double _stdcall sic_lgammas([in] double A, [in, out] unsigned long* S);
    [id(0x000000B8), helpstring("Gamma function")]
    double _stdcall sic_tgamma([in] double A);
    [id(0x000000B9), helpstring("Reciprocal gamma function")]
    double _stdcall sic_rgamma([in] double A);
    [id(0x000000BA), helpstring("Reciprocal gamma function")]
    double _stdcall sic_rtgamma([in] double A);
    [id(0x000000BB), helpstring("Beta function")]
    double _stdcall sic_beta([in] double A, [in] double B);
    [id(0x000000BC), helpstring("Add internal SIC functions")]
    long _stdcall AddFuns([in] void* ASic);
    [id(0x000000BD), helpstring("CPU random generator")]
    unsigned __int64 _stdcall cpuseed(void);
    [id(0x000000BE), helpstring("CPU random generator")]
    unsigned __int64 _stdcall cpuseed64(void);
    [id(0x000000BF), helpstring("CPU random generator")]
    unsigned long _stdcall cpuseed32(void);
    [id(0x000000C1), helpstring("CPU random generator")]
    unsigned short _stdcall cpuseed16(void);
    [id(0x000000C2), helpstring("CPU random generator")]
    unsigned __int64 _stdcall cpurand(void);
    [id(0x000000C3), helpstring("CPU random generator")]
    unsigned __int64 _stdcall cpurand64(void);
    [id(0x000000C4), helpstring("CPU random generator")]
    unsigned long _stdcall cpurand32(void);
    [id(0x000000C5), helpstring("CPU random generator")]
    unsigned short _stdcall cpurand16(void);
    [id(0x000000C6), helpstring("CPU random generator")]
    double _stdcall cpurandf(void);
    [id(0x000000C7), helpstring("CPU random generator")]
    double _stdcall cpurandf2pi(void);
  };

  [
    uuid(D2704A88-BF61-4664-8E4D-3AF9BE691DB6),
    version(1.0)
  ]
  coclass SICos64
  {
    [default] interface ISICs64;
  };

};
